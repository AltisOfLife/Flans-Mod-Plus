buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
	maven {
	    url = "https://repo1.maven.org/maven2/"
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
  }
}

apply plugin: 'forge'

version = "1.51"
group = "com.flansmod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Flan's Mod Ultimate"

sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"

    replace "@VERSION@", project.version

    replaceIn "FlansMod.java"

    replaceIn "MechaPartsPackMod.java"
    replaceIn "ModernWeaponsPackMod.java"
    replaceIn "NerfPackMod.java"
    replaceIn "SimplePartsPackMod.java"
    replaceIn "TitanPackMod.java"
    replaceIn "UtilityPackMod.java"
    replaceIn "WW2PackMod.java"
    replaceIn "YeOldePackMod.java"
    replaceIn "ZombiePackMod.java"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

idea {
    module {
        inheritOutputDirs = true
    }
}

task clearOutput(type: Delete) {
    delete 'build/output/'
}

task outputJar(type: Jar) {
    destinationDir = new File("build/output/mods/")
    from(zipTree("build/libs/${archiveName}")) {
        exclude '**/mechaparts/'
        exclude '**/modernweapons/'
        exclude '**/nerf/'
        exclude '**/simpleparts/'
        exclude '**/titan/'
        exclude '**/utility/'
        exclude '**/ww2/'
        exclude '**/yeolde/'
        exclude '**/zombie/'
    }
}

task outputPacks(type: Copy) {
    from('build/libs/') {
        include "**/*${version}.jar"
        exclude "**/${archivesBaseName}*.jar"
    }
    into 'build/output/mods/'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task mechaParts(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/mechaparts/' }
    from 'eclipse/Flan/Mecha Parts Pack'
    baseName = 'Mecha Parts'
    appendix = 'Content Pack'
}

task modernWeapons(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/modernweapons/' }
    from 'eclipse/Flan/Modern Weapons Pack'
    baseName = 'Modern Warfare'
    appendix = 'Content Pack'
}

task nerf(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/nerf/' }
    from 'eclipse/Flan/Nerf Pack'
    baseName = 'Nerf'
    appendix = 'Content Pack'
}

task simpleParts(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/simpleparts/' }
    from 'eclipse/Flan/Parts Pack'
    baseName = 'Simple Parts'
    appendix = 'Content Pack'
}

task titan(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/titan/' }
    from 'eclipse/Flan/Titan Pack'
    baseName = 'Titan'
    appendix = 'Content Pack'
}

task utility(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/utility/' }
    from 'eclipse/Flan/Utility Pack'
    baseName = 'Utility'
    appendix = 'Content Pack'
}

task ww2(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/ww2/' }
    from 'eclipse/Flan/WW2 Pack'
    baseName = 'WW2'
    appendix = 'Content Pack'
}

task yeOlde(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/yeolde/' }
    from 'eclipse/Flan/Ye Olde Pack'
    baseName = 'Ye Olde'
    appendix = 'Content Pack'
}

task zombie(type: Jar) {
    from(zipTree("${destinationDir}/${archiveName}")) { include 'com/flansmod/zombie/' }
    from 'eclipse/Flan/Zombie Pack'
    baseName = 'Zombie'
    appendix = 'Content Pack'
}

task contentPacks() {
    dependsOn mechaParts
    dependsOn modernWeapons
    dependsOn nerf
    dependsOn simpleParts
    dependsOn titan
    dependsOn utility
    dependsOn ww2
    dependsOn yeOlde
    dependsOn zombie
}

build {
    dependsOn contentPacks

    dependsOn clearOutput
    dependsOn outputJar

    dependsOn outputPacks
}

def customGradle = rootProject.file('custom.gradle');
if (customGradle.exists()) {
    apply from: customGradle;
}