package com.flansmod.common.network;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

import com.flansmod.common.driveables.EntityDriveable;
import com.flansmod.common.driveables.EntityPlane;
import com.flansmod.common.driveables.EntityVehicle;

public class PacketIT1Reload extends PacketBase
{
	public int entityId;
	public boolean canFire;
	public boolean reload;
	public int stage;
	public int stageDelay;
	public float dRailA;
	public float prevdRailA;


	
	public PacketIT1Reload() {}
	
	public PacketIT1Reload(EntityDriveable driveable)
	{
		entityId = driveable.getEntityId();
		canFire = driveable.canFireIT1;
		reload = driveable.reloadingDrakon;
		stage = driveable.stage;
		stageDelay = driveable.reloadAnimTime;
		dRailA = driveable.drakonRailAngle;
		prevdRailA = driveable.prevDrakonRailAngle;
	}
		
	@Override
	public void encodeInto(ChannelHandlerContext ctx, ByteBuf data) 
	{
    	data.writeInt(entityId);
    	data.writeBoolean(canFire);
    	data.writeBoolean(reload);
    	data.writeInt(stage);
    	data.writeInt(stageDelay);
    	data.writeFloat(dRailA); 
    	data.writeFloat(prevdRailA); 
	}

	@Override
	public void decodeInto(ChannelHandlerContext ctx, ByteBuf data) 
	{
		canFire = data.readBoolean();
		reload = data.readBoolean();
		stage = data.readInt();
		stageDelay = data.readInt();
		dRailA = data.readFloat();
		prevdRailA = data.readFloat();
	}

	@Override
	public void handleServerSide(EntityPlayerMP playerEntity) 
	{
		EntityDriveable driveable = null;
		for(Object obj : playerEntity.worldObj.loadedEntityList)
		{
			if(obj instanceof EntityDriveable && ((Entity)obj).getEntityId() == entityId)
			{
				driveable = (EntityDriveable)obj;
				break;
			}
		}
		if(driveable != null)
			updateDriveable(driveable, false);
	}
	
	protected void updateDriveable(EntityDriveable driveable, boolean clientSide)
	{
		driveable.canFireIT1 = canFire;
		driveable.reloadingDrakon = reload;
		driveable.stage = stage;
		driveable.reloadAnimTime = stageDelay;
		driveable.drakonRailAngle = dRailA;
		driveable.prevDrakonRailAngle = dRailA;
	}

	@Override
	@SideOnly(Side.CLIENT)
	public void handleClientSide(EntityPlayer clientPlayer) 
	{
		if(clientPlayer == null || clientPlayer.worldObj == null)
			return;
		EntityDriveable driveable = null;
		for(Object obj : clientPlayer.worldObj.loadedEntityList)
		{
			if(obj instanceof EntityDriveable && ((Entity)obj).getEntityId() == entityId)
			{
				driveable = (EntityDriveable)obj;
				if(driveable.seats[0] != null && driveable.seats[0].riddenByEntity == clientPlayer)
					return;
				break;
			}
		}
		if(driveable != null){
			updateDriveable(driveable, true);
		}
	}
}
